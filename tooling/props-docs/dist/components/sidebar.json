{
  "SidebarOptions": {
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "Control the visibility of the sidebar."
    },
    "motionPreset": {
      "type": "\"none\" | \"slideInOut\"",
      "required": false,
      "description": "The transition used when opening and closing the sidebar."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked when the sidebar is closed."
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked when the sidebar is opened."
    },
    "spacing": {
      "type": "ResponsiveValue<\n  | number\n  | (string & {})\n  | \"-moz-initial\"\n  | \"inherit\"\n  | \"initial\"\n  | \"revert\"\n  | \"revert-layer\"\n  | \"unset\"\n  | \"auto\"\n>",
      "required": false,
      "description": "Spacing between child elements."
    },
    "toggleBreakpoint": {
      "type": "false | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\"",
      "defaultValue": "lg",
      "required": false,
      "description": "Define the for the mobile nav. Use `false` to disable the mobile nav."
    }
  },
  "SidebarOverlay": {},
  "Sidebar": {
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "Control the visibility of the sidebar."
    },
    "motionPreset": {
      "type": "\"none\" | \"slideInOut\"",
      "required": false,
      "description": "The transition used when opening and closing the sidebar."
    },
    "onAnimationStart": {
      "type": "(definition: AnimationDefinition) => void",
      "required": false,
      "description": "Callback when animation defined in `animate` begins.\n\nThe provided callback will be called with the triggering animation definition.\nIf this is a variant, it'll be the variant name, and if a target object\nthen it'll be the target object.\n\nThis way, it's possible to figure out which animation has started.\n\n```jsx\nfunction onStart() {\n  console.log(\"Animation started\")\n}\n\n<motion.div animate={{ x: 100 }} onAnimationStart={onStart} />\n```"
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked when the sidebar is closed."
    },
    "onDrag": {
      "type": "(\n  event: MouseEvent | TouchEvent | PointerEvent,\n  info: PanInfo\n) => void",
      "required": false,
      "description": "Callback function that fires when the component is dragged.\n\n```jsx\n<motion.div\n  drag\n  onDrag={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```"
    },
    "onDragEnd": {
      "type": "(\n  event: MouseEvent | TouchEvent | PointerEvent,\n  info: PanInfo\n) => void",
      "required": false,
      "description": "Callback function that fires when dragging ends.\n\n```jsx\n<motion.div\n  drag\n  onDragEnd={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```"
    },
    "onDragStart": {
      "type": "(\n  event: MouseEvent | TouchEvent | PointerEvent,\n  info: PanInfo\n) => void",
      "required": false,
      "description": "Callback function that fires when dragging starts.\n\n```jsx\n<motion.div\n  drag\n  onDragStart={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```"
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked when the sidebar is opened."
    },
    "spacing": {
      "type": "ResponsiveValue<\n  | number\n  | (string & {})\n  | \"-moz-initial\"\n  | \"inherit\"\n  | \"initial\"\n  | \"revert\"\n  | \"revert-layer\"\n  | \"unset\"\n  | \"auto\"\n>",
      "required": false,
      "description": "Spacing between child elements."
    },
    "toggleBreakpoint": {
      "type": "false | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\"",
      "defaultValue": "lg",
      "required": false,
      "description": "Define the for the mobile nav. Use `false` to disable the mobile nav."
    }
  },
  "SidebarSection": {
    "direction": { "type": "ResponsiveValue<FlexDirection>", "required": false }
  },
  "SidebarToggleButton": {
    "icon": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: { ...; }) => ReactNode)",
      "required": false
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "isRound": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be perfectly round. Else, it'll be slightly round"
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    }
  },
  "Nav": {
    "orientation": {
      "type": "\"vertical\" | \"horizontal\"",
      "required": false
    },
    "spacing": {
      "type": "ResponsiveValue<\n  | number\n  | (string & {})\n  | \"-moz-initial\"\n  | \"inherit\"\n  | \"initial\"\n  | \"revert\"\n  | \"revert-layer\"\n  | \"unset\"\n  | \"auto\"\n>",
      "required": false
    }
  },
  "NavGroup": {
    "defaultIsOpen": { "type": "boolean", "required": false },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false
    },
    "isCollapsible": { "type": "boolean", "required": false },
    "onClose": { "type": "() => void", "required": false },
    "onOpen": { "type": "() => void", "required": false },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    }
  },
  "NavGroupTitle": {
    "collapseIcon": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: { ...; }) => ReactNode)",
      "required": false
    },
    "isCollapsible": { "type": "boolean", "required": false },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false
    }
  },
  "NavItemLabel": {},
  "NavItem": {
    "href": {
      "type": "string",
      "required": false,
      "description": "The href attribute of the nav item,\nwill be wrapped in a `Link`, if `linkComponent` is configured in SaasProvider."
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon to be displayed in the nav item"
    },
    "inset": {
      "type": "ResponsiveValue<\n  | number\n  | (string & {})\n  | \"-moz-initial\"\n  | \"inherit\"\n  | \"initial\"\n  | \"revert\"\n  | \"revert-layer\"\n  | \"unset\"\n>",
      "required": false,
      "description": "Inset of the item, used for nested items"
    },
    "isActive": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the nav item will be active"
    },
    "tooltipProps": {
      "type": "Omit<TooltipProps, \"children\">",
      "required": false,
      "description": "Props to be passed to the tooltip"
    }
  }
}
